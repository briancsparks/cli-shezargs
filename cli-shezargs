#!/usr/bin/env node

/* vim: set ft=javascript: */

var fs    = require('fs');
var path  = require('path');

process.stdout.on('error', function( err ) {
  if (err.code == "EPIPE") {
    process.exit(0);
  }
});

parseArgs();
fs.readFile(path.join(__dirname, 'scripts', 'common.sh'), function(err, common_sh) {

  if (err) { console.error(err); }
  else {
    process.stdout.write(common_sh);
  }
});

function parseArgs() {
  var positionArgs    = [];
  var pastLast        = false;

  var arg, m, key, i;

  for (i=2; i < process.argv.length; i++) {
    arg               = process.argv[i];
    key               = '';

    // --         all args after this should not be interpreted
    if (arg === '--') {
      pastLast = true;
    }

    // everything after -- is just a positional arg
    else if (pastLast) {
      positionArgs.push(arg);
    }

    // --foo=bar      (export foo="bar")
    else if ((m = arg.match(/^--([^=]+)=(.+)$/))) {
      key = m[1].replace(/[^a-z0-9]/gi, '_');
      process.stdout.write("export "+key+"="+m[2]+'\n');
    }

    // --foo-         (unset foo)
    else if ((m = arg.match(/^--([^=]+)-$/))) {
      key = m[1].replace(/[^a-z0-9]/gi, '_');
      process.stdout.write("unset "+key+'\n');
    }

    // --foo-it        (export foo_it="1")
    else if ((m = arg.match(/^--([^=]+)$/))) {
      key = m[1].replace(/[^a-z0-9]/gi, '_');
      process.stdout.write("export "+key+"=1"+'\n');
    }

    // Otherwise, this is just a positional arg
    else {
      positionArgs.push(arg);
    }
  }

  // Now reset the position args
  if (positionArgs.length > 0) {
    var newPosArgs = 'set -- ';
    for (i=0; i < positionArgs.length; i++) {
      newPosArgs += '"'+positionArgs[i]+'" ';
    }

    process.stdout.write(newPosArgs+'\n');
  }
}


