#!/usr/bin/env node

/* vim: set ft=javascript: */

var _     = require('underscore');
var fs    = require('fs-extra');
var path  = require('path');

if (process.argv[2] === '--help') {
  console.log('Usage: eval $(cli-shezargs __f $$ $0 $@)     # File support like TMP_DIR');
  console.log('       eval $(cli-shezargs $@)               # Parse args, scripts');
  console.log('       eval $(cli-shezargs)                  # Just scripts');
  process.exit(0);
}

process.stdout.on('error', function( err ) {
  if (err.code == "EPIPE") {
    process.exit(0);
  }
});

var needs = {scripts:['common']};
var hostPid, scriptName, safeScriptName;

var main = function() {
  var tmpDir, tmpFile, logFile;

  parseArgs();

  if (needs.fileSupport) {
    tmpDir  = path.join('/tmp', safeScriptName+'-'+hostPid);
    tmpFile = path.join(tmpDir, 'temp');
    logFile = path.join(tmpDir, 'logfile.log');
    jsonFile = path.join(tmpDir, 'temp_file.json');

    fs.mkdirpSync(tmpDir);
    fs.ensureFileSync(tmpFile);
    fs.ensureFileSync(logFile);
    fs.ensureFileSync(jsonFile);

    process.stdout.write('TMP_DIR="'+tmpDir+'"'+'\n');
    process.stdout.write('TMP_FILE="'+tmpFile+'"'+'\n');
    process.stdout.write('LOG_FILE="'+logFile+'"'+'\n');
    process.stdout.write('JSON_FILE="'+jsonFile+'"'+'\n');
  }

  if (scriptName) {
    process.stdout.write('script_dir="'+path.join(process.cwd(), path.dirname(scriptName))+'"\n');
  }

  fs.readFile(path.join(__dirname, 'scripts', 'common.sh'), function(err, common_sh) {

    if (err) { console.error(err); }
    else {
      process.stdout.write(common_sh);
    }
  });
};
main();

function parseArgs() {

  // What kind of support does the script want?
  if (process.argv.length < 3) { return; }              // No args, so no pre-processing

  var startArgNum = 2;

  var keyArg = process.argv[startArgNum];
  if (keyArg.startsWith('__')) {
    startArgNum += 1;

    _.each(_.rest(keyArg, 2), function(letter) {
      if (letter === 'f') { _.extend(needs, {fileSupport:true, pid:true, name:true}); }
    });
  }

  if (needs.pid) {
    hostPid = process.argv[startArgNum++];
  }

  if (needs.name) {
    scriptName     = process.argv[startArgNum];
    safeScriptName = process.argv[startArgNum++].replace(/[^a-z0-9]/ig, '');
  }

  // Now, parse the args
  var positionArgs    = [];
  var pastLast        = false;

  var arg, m, key, i;

  for (i=startArgNum; i < process.argv.length; i++) {
    arg               = process.argv[i];
    key               = '';

    // --         all args after this should not be interpreted
    if (arg === '--') {
      pastLast = true;
    }

    // everything after -- is just a positional arg
    else if (pastLast) {
      positionArgs.push(arg);
    }

    // --foo=bar      (export foo="bar")
    else if ((m = arg.match(/^--([^=]+)=(.+)$/))) {
      key = m[1].replace(/[^a-z0-9]/gi, '_');
      //process.stdout.write('export '+key+'="'+m[2]+'"\n');
      process.stdout.write(''+key+'="'+m[2]+'"\n');
    }

    // --foo-         (unset foo)
    else if ((m = arg.match(/^--([^=]+)-$/))) {
      key = m[1].replace(/[^a-z0-9]/gi, '_');
      process.stdout.write("unset "+key+'\n');
    }

    // --foo-it        (export foo_it="1")
    else if ((m = arg.match(/^--([^=]+)$/))) {
      key = m[1].replace(/[^a-z0-9]/gi, '_');
      //process.stdout.write('export '+key+'="1'+'"\n');
      process.stdout.write(''+key+'="1'+'"\n');
    }

    // Otherwise, this is just a positional arg
    else {
      positionArgs.push(arg);
    }
  }

  // Now reset the position args
  if (positionArgs.length > 0) {
    var newPosArgs = 'set -- ';
    for (i=0; i < positionArgs.length; i++) {
      newPosArgs += '"'+positionArgs[i]+'" ';
    }

    process.stdout.write(newPosArgs+'\n');
  }
}


